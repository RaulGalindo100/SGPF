-- MySQL Script generated by MySQL Workbench
-- Thu Apr 26 14:00:49 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

BEGIN;

-- -----------------------------------------------------
-- Schema SGPF
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `SGPF` ;

-- -----------------------------------------------------
-- Schema SGPF
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `SGPF` DEFAULT CHARACTER SET utf8 ;
USE `SGPF` ;

-- -----------------------------------------------------
-- Table `SGPF`.`proyecto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SGPF`.`proyecto` ;

CREATE TABLE IF NOT EXISTS `SGPF`.`proyecto` (
  `idproyecto` INT NOT NULL AUTO_INCREMENT,
  `nomProy` VARCHAR(60) NOT NULL,
  `anioProy` VARCHAR(4) NOT NULL,
  `operProy` TINYINT NOT NULL,
  `duraProy` DECIMAL(9,2) NOT NULL,
  `esfuTotProy` DECIMAL(9,2) NOT NULL,
  `esfuPlaneProy` DECIMAL(9,2) NOT NULL,
  `esfuEsReqProy` DECIMAL(9,2) NOT NULL,
  `esfuAnaDisProy` DECIMAL (9,2) NOT NULL,
  `esfuConstProy` DECIMAL(9,2) NOT NULL,
  `esfuPrueProy` DECIMAL(9,2) NOT NULL,
  `esfuImpleDesProy` DECIMAL(9,2) NOT NULL,
  `costTotProy` DECIMAL(9,2) NOT NULL,
  `costEsReqProy` DECIMAL(9,2) NOT NULL,
  `costAnaDisProy` DECIMAL(9,2) NOT NULL,
  `costConstProy` DECIMAL(9,2) NOT NULL,
  `costPrueProy` DECIMAL(9,2) NOT NULL,
  `costImpleDesProy` DECIMAL(9,2) NOT NULL,
  `tamFunProy` DECIMAL(9,2) NOT NULL,
  `fpAjusProy` DECIMAL(9,2) NOT NULL,
  `medidorCertProy` TINYINT NOT NULL,
  `expeMedMetProy` INT NOT NULL,
  `usoCase` TINYINT NOT NULL,
  `certModelo` TINYINT NOT NULL,
  `comCertModelo` VARCHAR(250) NOT NULL,
  `costPlanProy` DECIMAL(11,2) NOT NULL,
  `confInfo` VARCHAR(45) NOT NULL,
  `arqProyecto` VARCHAR(45) NOT NULL,
  `metDesarrollo` VARCHAR(45) NOT NULL,
  `metMedicion` VARCHAR(45) NOT NULL,
  `sisOpe` VARCHAR(45) NOT NULL,
  `tipoDesarrollo` VARCHAR(45) NOT NULL,
  `lenguaje` VARCHAR(45) NOT NULL,
  `modCalidad` VARCHAR(45) NOT NULL,
  `baseDatos` VARCHAR(45) NOT NULL,
  `secOrg` VARCHAR(45) NOT NULL,
  `estatus` TINYINT NOT NULL,
  `tipoOrg` VARCHAR(45) NOT NULL,
  `tipoCapOrg` VARCHAR(45) NOT NULL,
  `tamOrgDes` VARCHAR(45) NOT NULL,
  `tamOrgUsa` VARCHAR(45) NOT NULL,
  `marcoPosUsa` VARCHAR(45) NOT NULL,
  `escala` VARCHAR(45) NOT NULL,
  `capDes` VARCHAR(45) NOT NULL,
  `proposito` VARCHAR(250) NOT NULL,
  `alcance` VARCHAR(250) NOT NULL,
  PRIMARY KEY (`idproyecto`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SGPF`.`usuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SGPF`.`usuario` ;

CREATE TABLE IF NOT EXISTS `SGPF`.`usuario` (
  `idusuario` INT NOT NULL AUTO_INCREMENT,
  `nomUsuario` VARCHAR(45) NOT NULL,
  `pwdUsuario` VARCHAR(45) NOT NULL,
  `usuTipo1` TINYINT NULL,
  `usuTipo2` TINYINT NULL,
  `usuTipo3` TINYINT NULL,
  PRIMARY KEY (`idusuario`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SGPF`.`procesoFuncional`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SGPF`.`procesoFuncional` ;

CREATE TABLE IF NOT EXISTS `SGPF`.`procesoFuncional` (
  `idprocesoFuncional` INT NOT NULL AUTO_INCREMENT,
  `nomPF` VARCHAR(45) NOT NULL,
  `descripcion` VARCHAR(250) NOT NULL,
  `eventoDes` VARCHAR(250) NOT NULL,
  `idproyecto` INT NOT NULL,
  `tamPF` INT NOT NULL,
  PRIMARY KEY (`idprocesoFuncional`),
  INDEX `idproyecto_idx` (`idproyecto` ASC),
  CONSTRAINT `idproyecto`
    FOREIGN KEY (`idproyecto`)
    REFERENCES `SGPF`.`proyecto` (`idproyecto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SGPF`.`usuarioFuncional`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SGPF`.`usuarioFuncional` ;

CREATE TABLE IF NOT EXISTS `SGPF`.`usuarioFuncional` (
  `idusuarioFuncional` INT NOT NULL AUTO_INCREMENT,
  `nomUF` VARCHAR(45) NOT NULL,
  `descripcion` VARCHAR(250) NOT NULL,
  `activo` TINYINT NOT NULL,
  PRIMARY KEY (`idusuarioFuncional`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SGPF`.`accion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SGPF`.`accion` ;

CREATE TABLE IF NOT EXISTS `SGPF`.`accion` (
  `idaccion` INT NOT NULL AUTO_INCREMENT,
  `nomAccion` VARCHAR(45) NOT NULL,
  `movDatos` CHAR(1) NOT NULL,
  `descripcion` VARCHAR(250) NOT NULL,
  `activo` TINYINT NOT NULL,
  PRIMARY KEY (`idaccion`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SGPF`.`grupoDato`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SGPF`.`grupoDato` ;

CREATE TABLE IF NOT EXISTS `SGPF`.`grupoDato` (
  `idgrupoDato` INT NOT NULL AUTO_INCREMENT,
  `nomGD` VARCHAR(45) NOT NULL,
  `descripcion` VARCHAR (250) NOT NULL,
  `activo` TINYINT NOT NULL,
  PRIMARY KEY (`idgrupoDato`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SGPF`.`subProceso`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SGPF`.`subProceso` ;

CREATE TABLE IF NOT EXISTS `SGPF`.`subProceso` (
  `idsubProceso` INT NOT NULL AUTO_INCREMENT,
  `flujoAl` TINYINT NULL,
  `descripcion` VARCHAR(250) NULL,
  `idusuarioFuncional` INT NOT NULL,
  `idaccion` INT NOT NULL,
  `idgrupoDato` INT NOT NULL,
  `idprocesoFuncional` INT NOT NULL,
  `actividad` VARCHAR(45) NOT NULL,
  `indice` INT NOT NULL,
  PRIMARY KEY (`idsubProceso`),
  INDEX `idusuarioFuncional_idx` (`idusuarioFuncional` ASC),
  INDEX `idaccion_idx` (`idaccion` ASC),
  INDEX `idgrupoDato_idx` (`idgrupoDato` ASC),
  INDEX `idprocesoFuncional_idx` (`idprocesoFuncional` ASC),
  CONSTRAINT `idusuarioFuncional`
    FOREIGN KEY (`idusuarioFuncional`)
    REFERENCES `SGPF`.`usuarioFuncional` (`idusuarioFuncional`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idaccion`
    FOREIGN KEY (`idaccion`)
    REFERENCES `SGPF`.`accion` (`idaccion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idgrupoDato`
    FOREIGN KEY (`idgrupoDato`)
    REFERENCES `SGPF`.`grupoDato` (`idgrupoDato`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idprocesoFuncional`
    FOREIGN KEY (`idprocesoFuncional`)
    REFERENCES `SGPF`.`procesoFuncional` (`idprocesoFuncional`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;




-- -----------------------------------------------------
-- Table `SGPF`.`interUP`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SGPF`.`interUP` ;

CREATE TABLE IF NOT EXISTS `SGPF`.`interUP` (
  `idinterUP` INT NOT NULL AUTO_INCREMENT,
  `idusuario` INT NOT NULL,
  `idproyecto` INT NOT NULL,
  PRIMARY KEY (`idinterUP`),
  INDEX `idusuario_idx` (`idusuario` ASC),
  INDEX `idproyecto_idx` (`idproyecto` ASC),
  CONSTRAINT `idusuario1`
    FOREIGN KEY (`idusuario`)
    REFERENCES `SGPF`.`usuario` (`idusuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idproyecto1`
    FOREIGN KEY (`idproyecto`)
    REFERENCES `SGPF`.`proyecto` (`idproyecto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

set foreign_key_checks = 0;
-- --ESTE SI FUNCIONO
-- DELIMITER //
-- CREATE TRIGGER actualizaCFP AFTER INSERT ON SGPF.subProceso
-- FOR EACH ROW
-- BEGIN
--   DECLARE aux int default 0;
--   SET aux := (SELECT COUNT(*) FROM SGPF.subProceso
--    JOIN SGPF.procesoFuncional
--    ON subProceso.idprocesoFuncional = procesoFuncional.idprocesoFuncional
--     WHERE subProceso.flujoAl = 0 AND procesoFuncional.idprocesoFuncional = new.idprocesoFuncional);

--   UPDATE SGPF.procesoFuncional
--   SET tamPF  = aux
--   WHERE idprocesoFuncional =new.idprocesoFuncional;
-- END //


insert into usuario (nomUsuario, pwdUsuario,usuTipo1) values ('Olga', 'pass',true);
insert into usuario (nomUsuario, pwdUsuario,usuTipo2) values ('Juan', 'pass',true);

insert into proyecto (nomProy,anioProy,operProy,duraProy,esfuTotProy,esfuPlaneProy,esfuEsReqProy,esfuAnaDisProy,
  esfuConstProy,esfuPrueProy,esfuImpleDesProy,costTotProy,costEsReqProy,costAnaDisProy,costConstProy,costPrueProy,
  costImpleDesProy,tamFunProy,fpAjusProy,medidorCertProy,expeMedMetProy,usoCase,certModelo,comCertModelo,
  costPlanProy,confInfo,arqProyecto,metDesarrollo,metMedicion,sisOpe,tipoDesarrollo,lenguaje,
  modCalidad,baseDatos,secOrg,estatus,tipoOrg,tipoCapOrg,tamOrgDes,
  tamOrgUsa,marcoPosUsa,escala,capDes,proposito,alcance)
values
('C-Reg', '1993', true, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
true, 10, true, false, 'foo', 12.0, 'abcdef', 'abcdefg', 'abcdef', 'abcdefg', 'abcdef', 'abcdefg', 'abcdef', 'abcdefg',
 'abcdef', 'abcdefg', false, 'abcdef', 'abcdefg', 'abcdef', 'abcdefg', 'abcdef', 'abcdefg', 'abcdefg', 'abcdef', 'abcdefg');
 insert into proyecto (nomProy,anioProy,operProy,duraProy,esfuTotProy,esfuPlaneProy,esfuEsReqProy,esfuAnaDisProy,
   esfuConstProy,esfuPrueProy,esfuImpleDesProy,costTotProy,costEsReqProy,costAnaDisProy,costConstProy,costPrueProy,
   costImpleDesProy,tamFunProy,fpAjusProy,medidorCertProy,expeMedMetProy,usoCase,certModelo,comCertModelo,
   costPlanProy,confInfo,arqProyecto,metDesarrollo,metMedicion,sisOpe,tipoDesarrollo,lenguaje,
   modCalidad,baseDatos,secOrg,estatus,tipoOrg,tipoCapOrg,tamOrgDes,
   tamOrgUsa,marcoPosUsa,escala,capDes,proposito,alcance)
 values
 ('SGPF', '1993', true, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
 true, 10, true, false, 'foo', 12.0, 'abcdef', 'abcdefg', 'abcdef', 'abcdefg', 'abcdef', 'abcdefg', 'abcdef', 'abcdefg',
  'abcdef', 'abcdefg', false, 'abcdef', 'abcdefg', 'abcdef', 'abcdefg', 'abcdef', 'abcdefg', 'abcdefg', 'abcdef', 'abcdefg');

insert into interUP (idusuario, idproyecto) values (1, 1);
insert into interUP (idusuario, idproyecto) values (1, 2);
insert into interUP (idusuario, idproyecto) values (2, 2);

insert into procesoFuncional (nomPF,descripcion,eventoDes,idproyecto,tamPF) values ('cualquiera','descripcion','entrada desencadenante',2,0);
insert into procesoFuncional (nomPF,descripcion,eventoDes,idproyecto,tamPF) values ('cualquiera','descripcion','entrada desencadenenante',2,0);

insert into accion (nomAccion,movDatos,descripcion,activo) values ('ingresa','E','entrada de datos',true);
insert into accion (nomAccion,movDatos,descripcion,activo) values ('envia','X','envia de datos',true);
insert into accion (nomAccion,movDatos,descripcion,activo) values ('solicita','R','pide de datos',false);

insert into grupoDato (nomGD,descripcion,activo) values ('estudiante','Estudiante del IIMAS',true);
insert into usuarioFuncional (nomUF,descripcion,activo) values ('Registrador','Registrador del IIMAS',true);

insert into usuarioFuncional (nomUF,descripcion,activo) values ('C-Reg','Sistema C-Reg',true);
insert into usuarioFuncional (nomUF,descripcion,activo) values ('Registrador','Registrador C-Reg',true);

insert into subProceso (flujoAl,descripcion, idusuarioFuncional,idaccion,idgrupoDato,idprocesoFuncional,actividad,indice)
values (0,'los datos de',2,1,1,2,'Inicio de PF',1);
insert into subProceso (flujoAl,descripcion, idusuarioFuncional,idaccion,idgrupoDato,idprocesoFuncional,actividad,indice)
values (0,'los datos de',2,1,1,2,'Inicio de PF',2);
insert into subProceso (flujoAl,descripcion, idusuarioFuncional,idaccion,idgrupoDato,idprocesoFuncional,actividad,indice)
values (0,'los datos de',2,1,1,2,'Valida',1);
insert into subProceso (flujoAl,descripcion, idusuarioFuncional,idaccion,idgrupoDato,idprocesoFuncional,actividad,indice)
values (0,'los datos de',2,1,1,2,'Valida',2);

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

COMMIT;
