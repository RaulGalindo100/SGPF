-- MySQL Script generated by MySQL Workbench
-- Thu Apr 26 14:00:49 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

BEGIN;

-- -----------------------------------------------------
-- Schema SGPF
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `SGPF` ;

-- -----------------------------------------------------
-- Schema SGPF
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `SGPF` DEFAULT CHARACTER SET utf8 ;
USE `SGPF` ;

-- -----------------------------------------------------
-- Table `SGPF`.`proyecto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SGPF`.`proyecto` ;

CREATE TABLE IF NOT EXISTS `SGPF`.`proyecto` (
  `idproyecto` INT NOT NULL AUTO_INCREMENT,
  `nomProy` VARCHAR(60) NOT NULL,
  `anioProy` VARCHAR(4) NOT NULL,
  `operProy` TINYINT NOT NULL,
  `duraProy` DECIMAL(9,2) NOT NULL,
  `esfuTotProy` DECIMAL(9,2) NOT NULL,
  `esfuPlaneProy` DECIMAL(9,2) NOT NULL,
  `esfuEsReqProy` DECIMAL(9,2) NOT NULL,
  `esfuAnaDisProy` DECIMAL (9,2) NOT NULL,
  `esfuConstProy` DECIMAL(9,2) NOT NULL,
  `esfuPrueProy` DECIMAL(9,2) NOT NULL,
  `esfuImpleDesProy` DECIMAL(9,2) NOT NULL,
  `costTotProy` DECIMAL(9,2) NOT NULL,
  `costEsReqProy` DECIMAL(9,2) NOT NULL,
  `costAnaDisProy` DECIMAL(9,2) NOT NULL,
  `costConstProy` DECIMAL(9,2) NOT NULL,
  `costPrueProy` DECIMAL(9,2) NOT NULL,
  `costImpleDesProy` DECIMAL(9,2) NOT NULL,
  `tamFunProy` DECIMAL(9,2) NOT NULL,
  `fpAjusProy` DECIMAL(9,2) NOT NULL,
  `medidorCertProy` TINYINT NOT NULL,
  `expeMedMetProy` INT NOT NULL,
  `usoCase` TINYINT NOT NULL,
  `certModelo` TINYINT NOT NULL,
  `comCertModelo` VARCHAR(250) NOT NULL,
  `costPlanProy` DECIMAL(11,2) NOT NULL,
  `confInfo` VARCHAR(45) NOT NULL,
  `arqProyecto` VARCHAR(45) NOT NULL,
  `metDesarrollo` VARCHAR(45) NOT NULL,
  `metMedicion` VARCHAR(45) NOT NULL,
  `sisOpe` VARCHAR(45) NOT NULL,
  `tipoDesarrollo` VARCHAR(45) NOT NULL,
  `lenguaje` VARCHAR(45) NOT NULL,
  `modCalidad` VARCHAR(45) NOT NULL,
  `baseDatos` VARCHAR(45) NOT NULL,
  `secOrg` VARCHAR(45) NOT NULL,
  `estatus` TINYINT NOT NULL,
  `tipoOrg` VARCHAR(45) NOT NULL,
  `tipoCapOrg` VARCHAR(45) NOT NULL,
  `tamOrgDes` VARCHAR(45) NOT NULL,
  `tamOrgUsa` VARCHAR(45) NOT NULL,
  `marcoPosUsa` VARCHAR(45) NOT NULL,
  `escala` VARCHAR(45) NOT NULL,
  `capDes` VARCHAR(45) NOT NULL,
  `proposito` VARCHAR(250) NOT NULL,
  `alcance` VARCHAR(250) NOT NULL,
  PRIMARY KEY (`idproyecto`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SGPF`.`usuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SGPF`.`usuario` ;

CREATE TABLE IF NOT EXISTS `SGPF`.`usuario` (
  `idusuario` INT NOT NULL AUTO_INCREMENT,
  `nomUsuario` VARCHAR(45) NOT NULL,
  `pwdUsuario` VARCHAR(45) NOT NULL,
  `usuTipo1` TINYINT NULL,
  `usuTipo2` TINYINT NULL,
  `usuTipo3` TINYINT NULL,
  PRIMARY KEY (`idusuario`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SGPF`.`procesoFuncional`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SGPF`.`procesoFuncional` ;

CREATE TABLE IF NOT EXISTS `SGPF`.`procesoFuncional` (
  `idprocesoFuncional` INT NOT NULL AUTO_INCREMENT,
  `nomPF` VARCHAR(45) NOT NULL,
  `descripcion` VARCHAR(250) NOT NULL,
  `eventoDes` VARCHAR(250) NOT NULL,
  `idproyecto` INT NOT NULL,
  `tamPF` INT NOT NULL,
  `activo` TINYINT NOT NULL,
  PRIMARY KEY (`idprocesoFuncional`),
  INDEX `idproyecto_idx` (`idproyecto` ASC),
  CONSTRAINT `idproyecto`
    FOREIGN KEY (`idproyecto`)
    REFERENCES `SGPF`.`proyecto` (`idproyecto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SGPF`.`usuarioFuncional`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SGPF`.`usuarioFuncional` ;

CREATE TABLE IF NOT EXISTS `SGPF`.`usuarioFuncional` (
  `idusuarioFuncional` INT NOT NULL AUTO_INCREMENT,
  `nomUF` VARCHAR(45) NOT NULL,
  `descripcion` VARCHAR(250) NOT NULL,
  `activo` TINYINT NOT NULL,
  PRIMARY KEY (`idusuarioFuncional`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SGPF`.`accion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SGPF`.`accion` ;

CREATE TABLE IF NOT EXISTS `SGPF`.`accion` (
  `idaccion` INT NOT NULL AUTO_INCREMENT,
  `nomAccion` VARCHAR(45) NOT NULL,
  `movDatos` CHAR(1) NOT NULL,
  `descripcion` VARCHAR(250) NOT NULL,
  `activo` TINYINT NOT NULL,
  PRIMARY KEY (`idaccion`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SGPF`.`grupoDato`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SGPF`.`grupoDato` ;

CREATE TABLE IF NOT EXISTS `SGPF`.`grupoDato` (
  `idgrupoDato` INT NOT NULL AUTO_INCREMENT,
  `nomGD` VARCHAR(45) NOT NULL,
  `descripcion` VARCHAR (250) NOT NULL,
  `activo` TINYINT NOT NULL,
  PRIMARY KEY (`idgrupoDato`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SGPF`.`subProceso`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SGPF`.`subProceso` ;

CREATE TABLE IF NOT EXISTS `SGPF`.`subProceso` (
  `idsubProceso` INT NOT NULL AUTO_INCREMENT,
  `flujoAl` TINYINT NULL,
  `descripcion` VARCHAR(250) NULL,
  `idusuarioFuncional` INT NOT NULL,
  `idaccion` INT NOT NULL,
  `idgrupoDato` INT NOT NULL,
  `idprocesoFuncional` INT NOT NULL,
  `actividad` VARCHAR(45) NOT NULL,
  `indice` INT NOT NULL,
  PRIMARY KEY (`idsubProceso`),
  INDEX `idusuarioFuncional_idx` (`idusuarioFuncional` ASC),
  INDEX `idaccion_idx` (`idaccion` ASC),
  INDEX `idgrupoDato_idx` (`idgrupoDato` ASC),
  INDEX `idprocesoFuncional_idx` (`idprocesoFuncional` ASC),
  CONSTRAINT `idusuarioFuncional`
    FOREIGN KEY (`idusuarioFuncional`)
    REFERENCES `SGPF`.`usuarioFuncional` (`idusuarioFuncional`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idaccion`
    FOREIGN KEY (`idaccion`)
    REFERENCES `SGPF`.`accion` (`idaccion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idgrupoDato`
    FOREIGN KEY (`idgrupoDato`)
    REFERENCES `SGPF`.`grupoDato` (`idgrupoDato`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idprocesoFuncional`
    FOREIGN KEY (`idprocesoFuncional`)
    REFERENCES `SGPF`.`procesoFuncional` (`idprocesoFuncional`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;




-- -----------------------------------------------------
-- Table `SGPF`.`interUP`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SGPF`.`interUP` ;

CREATE TABLE IF NOT EXISTS `SGPF`.`interUP` (
  `idinterUP` INT NOT NULL AUTO_INCREMENT,
  `idusuario` INT NOT NULL,
  `idproyecto` INT NOT NULL,
  PRIMARY KEY (`idinterUP`),
  INDEX `idusuario_idx` (`idusuario` ASC),
  INDEX `idproyecto_idx` (`idproyecto` ASC),
  CONSTRAINT `idusuario1`
    FOREIGN KEY (`idusuario`)
    REFERENCES `SGPF`.`usuario` (`idusuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idproyecto1`
    FOREIGN KEY (`idproyecto`)
    REFERENCES `SGPF`.`proyecto` (`idproyecto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

set foreign_key_checks = 0;
-- --ESTE SI FUNCIONO
-- DELIMITER //
-- CREATE TRIGGER actualizaCFP AFTER INSERT ON SGPF.subProceso
-- FOR EACH ROW
-- BEGIN
--   DECLARE aux int default 0;
--   SET aux := (SELECT COUNT(*) FROM SGPF.subProceso
--    JOIN SGPF.procesoFuncional
--    ON subProceso.idprocesoFuncional = procesoFuncional.idprocesoFuncional
--     WHERE subProceso.flujoAl = 0 AND procesoFuncional.idprocesoFuncional = new.idprocesoFuncional);

--   UPDATE SGPF.procesoFuncional
--   SET tamPF  = aux
--   WHERE idprocesoFuncional =new.idprocesoFuncional;
-- END //


INSERT INTO `usuario` VALUES (1,'Olga','pass',1,NULL,NULL),(2,'Juan','pass',NULL,1,NULL),(3,'Pancho','pass',NULL,NULL,1);

INSERT INTO `proyecto` VALUES (1,'C-Reg','1993',1,10.00,10.00,10.00,10.00,10.00,10.00,10.00,10.00,10.00,10.00,10.00,10.00,10.00,10.00,10.00,10.00,1,10,1,0,'foo',12.00,'abcdef','abcdefg','abcdef','abcdefg','abcdef','abcdefg','abcdef','abcdefg','abcdef','abcdefg',1,'abcdef','abcdefg','abcdef','abcdefg','abcdef','abcdefg','abcdefg','abcdef','abcdefg'),(2,'SGPF','1993',1,10.00,10.00,10.00,10.00,10.00,10.00,10.00,10.00,10.00,10.00,10.00,10.00,10.00,10.00,10.00,10.00,1,10,1,0,'foo',12.00,'abcdef','abcdefg','abcdef','abcdefg','abcdef','abcdefg','abcdef','abcdefg','abcdef','abcdefg',0,'abcdef','abcdefg','abcdef','abcdefg','abcdef','abcdefg','abcdefg','abcdef','abcdefg'),(3,'Olgasss','2015',1,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,1,1,1,1,'Olgasss',0.24,'Olgasss','Olgasss','Olgasss','Olgasss','Olgasss','Olgasss','Olgasss','Olgasss','Olgasss','Olgasss',1,'Olgasss','Olgasss','Olgasss','Olgasss','Olgasss','Olgasss','Olgasss','Olgasss','Olgasss'),(4,'C-Reg691ffeaafe23','2015',1,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,1,1,1,1,'C-Reg69123',0.24,'C-Reg69123','C-Reg69123','C-Reg69123','C-Reg69123','C-Reg69123','C-Reg69123','C-Reg69123','C-Reg69123','C-Reg69123','C-Reg69123',0,'C-Reg69123','C-Reg69123','C-Reg69123','C-Reg69123','C-Reg69123','C-Reg69123','C-Reg69123','C-Reg69123','C-Reg69123');

INSERT INTO `interUP` VALUES (1,1,1),(2,1,2),(3,2,2),(4,1,3),(5,1,4),(6,3,2),(7,3,4);

INSERT INTO `procesofuncional` VALUES (1,'cualquiera','descripcion','entrada desencadenante',2,0,1),(2,'cualquiera','descripcion','entrada desencadenenante',2,0,0),(3,'Pancho','Nuevo','Genial',2,0,1),(4,'Mi Proceso Funcional','Esta es una descripción para el proceso funcional.','Esta es una instancia de evento desencadenante',2,0,0),(5,'Nuevo','hkjekj','nhjhkj',4,0,0);

INSERT INTO `accion` VALUES (1,'ingresaSz','M','entrada de datos',1),(2,'envia','X','envia de datos',0),(3,'solicita','R','pide de datos',0),(4,'Prueba','X','This',1),(5,'Prueba2','E','22',1),(6,'Prueba','X','C',1),(7,'Bombón','M','D',1),(8,'Prueba','E','This is the description',1);

INSERT INTO `grupodato` VALUES (1,'estudianteR','Estudiante del IIMAZ',0),(2,'Juano','Sisg',1),(3,'','',1),(4,'','',1),(5,'','',1),(6,'','',1),(7,'df','',1),(8,'fe','ef',1),(9,'Juano','Feith',1),(10,'Peio','kbjhb',1);

INSERT INTO `usuariofuncional` VALUES (1,'Registradores','Registrador del IIMAST',1),(2,'C-Reg','Sistema C-Reg',1),(3,'Registrador','Registrador C-Reg',1),(4,'Juano','FHKLI',1);

INSERT INTO `subproceso` VALUES (1,0,'los datos de',2,1,1,2,'Inicio de PF',1),(2,0,'los datos de',2,1,1,2,'Inicio de PF',2),(3,0,'los datos de',2,1,1,2,'Valida',1),(4,0,'los datos de',2,1,1,2,'Valida',2),(5,1,'canjlewnlk',1,1,2,5,'Inicio de Proceso Funcional',1),(6,1,'caenew',1,1,2,5,'Inicio de Proceso Funcional',2);
SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

COMMIT;
